<?php

namespace Shop\CatalogBundle\Entity;

use Doctrine\ORM\Query\Expr;
use Weasty\Doctrine\Entity\AbstractRepository;
use Shop\UserBundle\Entity\AbstractUser;
use Shop\UserBundle\Entity\Manager;
use Shop\UserBundle\Entity\ManagerContractor;

/**
 * CustomerOrderRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerOrderRepository extends AbstractRepository
{

    public function findOrders(AbstractUser $user){

        $qb = $this->getEntityManager()->createQueryBuilder();
        $expr = $qb->expr();

        $qb
            ->select(array(
                'co.*'
            ))
            ->from('ShopCatalogBundle:CustomerOrder', 'co')
            ->leftJoin('ShopCatalogBundle:CustomerOrderProposal', 'cop', Expr\Join::LEFT_JOIN, $expr->eq('cop.orderId', 'co.id'))
            ->leftJoin('ShopCatalogBundle:Proposal', 'p', Expr\Join::LEFT_JOIN, $expr->eq('p.id', 'cop.proposalId'))
            ->leftJoin('ShopCatalogBundle:Price', 'pp', Expr\Join::LEFT_JOIN, $expr->eq('pp.id', 'cop.priceId'))
        ;

        if($user instanceof Manager){

            $mangerContractors = $user->getContractors();
            $mangerContractorsExprList = array();

            foreach($mangerContractors as $mangerContractor){

                if($mangerContractor instanceof ManagerContractor){

                    $contractorId = $mangerContractor->getContractorId();
                    $categoryIds = $mangerContractor->getCategoryIds();

                    $mangerContractorsExprList[] = $expr->andX(
                        ($contractorId ? $expr->eq('pp.contractorId', $contractorId) : null),
                        ($categoryIds ? $expr->in('p.categoryId', $categoryIds) : null)
                    );

                }

            }

            $mangerContractorsExpr = call_user_func_array(array($expr, 'orX'), $mangerContractorsExprList);

            $qb->andWhere($expr->orX(
                $expr->andX(
                    $expr->isNull('cop.managerId'),
                    $mangerContractorsExpr
                ),
                $expr->orX(
                    $expr->eq('cop.managerId', $user->getId())
                )
            ));

        } elseif(!$user->hasRole($user::ROLE_ADMIN)) {

            $qb->andWhere(
                $expr->orX(
                    $expr->eq('cop.managerId', $user->getId()),
                    $expr->eq('cop.courierId', $user->getId())
                )
            );

        }

        $qb
            ->addGroupBy('co.id')
            ->addOrderBy('co.createDate', 'DESC')
        ;

        $this->convertDqlToSql($qb);
        $sql = (string)$qb;

        $rsm = $this->createResultSetMappingFromMetadata('ShopCatalogBundle:CustomerOrder', 'co');

        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm);
        return $query->getResult();

    }

}
